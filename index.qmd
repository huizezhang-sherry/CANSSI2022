---
title: "Switching between space and time: Spatio-temporal analysis with <br> {{< fa earth-oceania >}} cubble {{< fa clock size=fa-xs >}}"
author: '[{{< fa brands github >}}](https://github.com/huizezhang-sherry/) Sherry Zhang [{{< fa brands twitter >}}](https://twitter.com/huizezhangsh)'
date: "Nov 10 2022"
institute: "Monash University, Melbourne, Australia"
host: "CANSSI Ontario Statistical Software Conference" 
format: 
  revealjs:
    scrollable: true
    slide-number: true
    show-slide-number: all
    aspectratio: 169
    theme: [default]
    preview-links: auto
    title-slide-attributes:
      data-background-image: "figures/canssi-logo.png"
      data-background-position: "top 0% right 0%"
      data-background-size: "10%, 10%"
    multiplex: true
editor_options: 
  chunk_output_type: console
---

# Hi! {.smaller}

<!-- https://sherryzhang-canssi.netlify.app/ -->

```{r setup}
#| include: false  
library(knitr)
options(htmltools.dir.version = FALSE)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, error=FALSE, fig.align = "center")
wide_width <-  100
options(pillar.print_max = 5, 
        pillar.print_min = 5, 
        width = wide_width)
library(tidyverse)
library(sf)
library(ggsvg)
library(ozmaps)
library(cubble)
library(patchwork)
library(tsibble)
library(flair)
```

```{css, echo=FALSE}
.title {
  font-size: 20px;
}
```

::: columns
::: {.column width="65%"}
-   A third year PhD student at Monash University

-   My research centers on exploring multivariate spatio-temporal data with data wrangling and visualisation tool.

-   Find me on

    -   Twitter: `huizezhangsh`,
    -   github: `huizezhang-sherry`, and
    -   `https://huizezhangsh.netlify.app/`
:::

::: {.column width="35%"}
```{r}
knitr::include_graphics(here::here("figures/headshot.jpg"))
```
:::
:::

```{r}
stations <- cubble::climate_subset %>% select(-ts)

oz <- ozmaps::abs_ste %>% filter(NAME != "Other Territories")
oz_simp <- oz %>% rmapshaper::ms_simplify(keep = 0.05) 

ts <- cubble::climate_subset %>% 
  face_temporal() %>% 
  filter(!is.na(tmax), !is.na(tmin)) %>% 
  as_tibble()
```

## Storage of spatial and temporal data is often split into different tables {.stored-separately background-image="figures/store-fridge.jpg, figures/store-pantry.jpg" background-position="left bottom, right top" background-size="38% 100%, 30% 100%"}

```{css echo=FALSE}
.stored-separately h2{
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 30px 30px 30px 30px;
  color: black; 
  text-align: right;
  position: absolute;
  top: 3%;
  right:30%;
  font-size: 1.5em
}
```

:::{.footer}
source: [https://unsplash.com/photos/ZUhM8LE_HGc](https://unsplash.com/photos/ZUhM8LE_HGc) and [https://unsplash.com/photos/nLHnx2-_sK4](https://unsplash.com/photos/nLHnx2-_sK4)
:::

::: notes
Storage of spatial and temporal data is often split into different tables, which complicates spatio-temporal data analysis.
:::

## Long table? {.join background-image="figures/long-table.jpg" background-size="38% 100%" background-position="left"}

::: {style="text-align: right; position:absolute; left:40%"}
Inefficient memory use, 

repeated information,

especially when large geometry objects are combined with frequent temporal data (daily or weekly).
:::

```{css echo=FALSE}
.join h2{
  text-align: right;
  right: 0%;
}
```

::: footer
source: <https://unsplash.com/photos/KKTCngYYWFk>
:::

## Still use all my data analysis toolkits built from tibble /data.frame {.still-tibble background-image="figures/tibble-can.jpeg, figures/tibble-can.jpeg" background-size="25% 100%" background-position="left, 33%"}

```{css echo=FALSE}
.still-tibble h2{
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 30px 30px 30px 30px;
  text-align: right; 
  position: absolute;
  top: 30%;
  left: 35%;
}
```

::: footer
source: <https://www.educaborras.com/en/product/1500-cans/>
:::

## Cubble: a spatio-temporal vector data structure

Cubble is a nested object built on tibble that allow easy pivoting between spatial and temporal form.

```{r}
knitr::include_graphics(here::here("figures/cubble-operations.png"))
```

::: footer
<https://huizezhang-sherry.github.io/cubble/articles/cubble-design.html>
:::

::: notes
For the wrangling part, I will use the cubble package

A cubble has two forms, a nested form where all the temporal data is nested in a list column, just as how the geometry is a list column in the sf package.

This form can be used for calculation on the space or make per station summary from the time series

Another form is called the long form, which will elaborate the time series data in the long form and temporaily hide the spatial data.

With the long form, you can make some temporal summary of the data.

Here the illustration shows you how to turn a nested cubble into the long form with `face_temporal()` and backward with `face_spatial()`.
:::

## Pipeline with cubble {.smaller}

::: columns
::: column
```{r conv-code, eval = FALSE, echo =TRUE}
spatial <- stations %>% 
  {{ Your spatial analysis }} 

##############################
# more subsetting step if temporal analysis
# depends on spatial results
sp_id <- spatial %>% pull(id)
ts_subset <- ts %>% filter(id %in% sp_id)
##############################

temporal <- ts_subset %>% 
  {{ Your temporal analysis }} 

##############################
# more subsetting step if spatial analysis 
# depends on temporal results
ts_id <- temporal %>% pull(id)
sp_subset <- spatial %>% filter(id %in% ts_id)
##############################

sp_subset %>% 
  {{ Your spatial analysis }} 
  
```
:::

::: column
```{r cb-code, eval = FALSE, echo = TRUE}
cb_obj %>% 
  {{ Your spatial analysis }} %>% 
  face_temporal() %>% 
  {{ Your temporal analysis }} %>% 
  face_spatial() %>% 
  {{ Your spatial analysis }} 
```
:::
:::

::: notes
-   Here is a syntax comparison with and without cubble

-   With cubble, you can do some spatial analysis in the nested form, pivot it to the long form for some temporal analysis, and then pivot it back to the nested form for some additional spatial analysis.

-   Sometimes, the spatial analysis include extracting some interesting sites.

-   Without cubble, you will need to first pull out those interesting ids, and then filter the temporal data on these sites.

-   Similar steps can also happen in the temporal analysis and the spatial data needs to be updated.

-   In cubble, these updates are automatically handled by `face_temporal()` and `face_spatial()` and no manual updates are needed.

-   Also the cubble pipeline chains all the operations together with no intermediate objects created in the workflow.
:::

## Australia weather station data: {.smaller}

::: columns
::: {.column width="60%"}
```{r}
#| echo: true
stations
```

```{r data-stations}
#| echo: false
#| eval: true
ggplot() +
  geom_sf(data = oz_simp, fill = "grey95", color = "white") +
  geom_point(data = stations, aes(long,lat)) + 
  ggthemes::theme_map()
```
:::

::: {.column width="40%"}
```{r}
#| echo: true
ts
```

```{r data-ts}
ts %>% 
  ggplot() +
  geom_line(aes(x = date, y = tmax, group = id), alpha = 0.4) + 
  theme_bw()
```
:::
:::

## Cast your data into a cubble

```{r echo = TRUE}
(weather <- as_cubble(
  list(spatial = stations, temporal = ts),
  key = id, index = date, coords = c(long, lat)
))
```

-   the spatial data can be an `sf` object and temporal data can be a `tsibble` object.

::: notes
There are different ways you can create a cubble.

If you have the spatial and temporal data in two separate tables, you can supply them as a list.

Then you need to specify some parameters. The key and index are the same as how you would construct a tsibble

And cubble requires an additional `coords` parameter for coordinates.

This is how the created cubble looks like
:::

## Cubble summary {.smaller}

::: columns
::: column
long form

```{r echo = FALSE}
options(width = 50)
```

```{r face-temporal, echo = TRUE}
(weather_long <- weather %>% 
  face_temporal())
```

```{r echo = TRUE}
attr(weather_long, "spatial") 
```
:::

::: column
back to the nested form:

```{r}
#| echo: true
(weather_back <- weather_long %>% face_spatial())

identical(weather_back, weather)
```
:::
:::

::: notes
-   We can pivot this object into the long form with `face_temporal()`

-   Now the object `weather_long` is a long form cubble and it is a subclass of tsibble

-   The third line in the header now changes to see the available spatial variables

-   The spatial variables are stored in the `spatial` attribute, which you can see through this command.

-   Here it is stored as an sf object

-   Here is the code example of using the function `face_spatial()` on the long form cubble

-   This would give us the nested cubble before making the switch to the long form
:::

## Access variables in the other form {.smaller}

```{r}
options(width = 100)
```

Reference temporal variables with `$`

```{r}
#| echo: true
weather %>% 
  mutate(avg_tmax = mean(ts$tmax, na.rm = TRUE))
```

Move spatial variables (temporarily) into the long form

```{r echo = TRUE}
weather_long %>% unfold(long, lat)
```

::: notes
Now we have longitude and latitude in the nested form and monthly summarised tmax in the long form, the last thing we need to do is to move them into the same table before making the glyph map.

Here you need the verb `unfold`
:::

## Explore temporal pattern across space {.text-bottom background-image="figures/temporal-pattern-across-space.png" background-size="80% 90%" background-position="center"}

```{css echo=FALSE}
.text-bottom h2{
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 30px 30px 30px 30px;
  color: black; 
  position: absolute;
  top: 78%;
  left: 3%;
  font-size: 1.5em
}
```

## Glyph map transformation

```{r}
knitr::include_graphics(here::here("figures/glyph-steps.png"))
```

```{r eval = FALSE, echo = TRUE}
DATA %>%
  ggplot() +
  geom_glyph(
    aes(x_major = X_MAJOR, x_minor = X_MINOR,
        y_major = Y_MAJOR, y_minor = Y_MINOR)) +
  ...
```

::: footer
<https://huizezhang-sherry.github.io/cubble/articles/glyph.html>
:::

::: notes
The glyphmap is essentially a transformation of temporal variable into space.

Here (1) shows a single station with its long and lat coordinate and (2) is its associated time series. We can use linear algebra to transform the temporal axes into the spatial scale as in (3) and once we have the time series in the transformed axes, they can be placed onto the map as in (4)

To make a glyph map, you can use the `geom_glyph` function from cubble.

It requires a pair of major and a pair of minor variable as aesthetics

The major variable are the spatial coordinates, long and lat here and hte minor variable are the temporal coordinates, date and tmax here.

Here (1) and (2) are
:::

## Avg. max. temperature on the map {.smaller}

```{r glyphmap}
#| output-location: column
#| echo: true
#| fig-width: 7
#| fig-height: 7
cb <- as_cubble(
  list(spatial = stations, temporal = ts),
  key = id, index = date, coords = c(long, lat)
)

set.seed(0927)
cb_glyph <- cb %>%
  slice_sample(n = 20) %>%
  face_temporal() %>%
  mutate(month = lubridate::month(date)) %>%
  group_by(month) %>% 
  summarise(tmax = mean(tmax, na.rm = TRUE)) %>%
  unfold(long, lat)

ggplot() +
  geom_sf(data = oz_simp, 
          fill = "grey95", 
          color = "white") +
  geom_glyph(
    data = cb_glyph,
    aes(x_major = long, x_minor = month,
        y_major = lat, y_minor = tmax),
    width = 2, height = 0.7) + 
  ggthemes::theme_map()
```

## Further reading

-   cubble: <https://huizezhang-sherry.github.io/cubble/>

## Acknowledgements

-   The slides are made with [Quarto](https://quarto.org/)

-   All the materials used to prepare the slides are available at [sherryzhang-CANSSI2022.netlify.app](sherryzhang-CANSSI2022.netlify.app)

```{r eval = FALSE}
# script for diagram
library(tidyverse)
library(patchwork)
nsw <- ozmaps::abs_ste %>% filter(NAME %in% c("New South Wales")) %>% rmapshaper::ms_simplify()

single <- climate_aus %>% filter(id == "ASN00076031")
glyph_dt <- single %>% face_temporal() %>% unfold(long, lat) %>% mutate(tmax = ifelse(is.na(tmax), lead(tmax, 2), tmax))
p1 <- ggplot() +
  geom_sf(data = nsw,fill = "transparent", linetype = "dotted")+
  geom_point(data = single, aes(x = long, y = lat)) +
  theme_bw() +
  coord_sf(xlim = c(141, 143), ylim = c(-35, -33.5)) +
  scale_x_continuous(breaks = seq(140, 143, 1)) +
  scale_y_continuous(breaks = seq(-35, -33, 1)) +
  ggtitle("(1)")

p2 <- single %>%
  face_temporal() %>%
  ggplot(aes(x = date, y = tmax)) +
  geom_line(alpha = 0.8) +
  theme_bw() +
  theme() +
  ggtitle("(2)")

glyph <- glyph_dt %>%
  ggplot(aes(x_major = long, x_minor = as.numeric(date),
             y_major = lat, y_minor = tmax)) +
  geom_glyph(width = 1, height = 0.3)

p3 <- layer_data(glyph) %>%
  ggplot(aes(x = x, y = y)) +
  geom_line(alpha = 0.8) +
  theme_bw() +
  theme(axis.line = element_line(color = "#840032"),
        axis.text = element_text(color = "#840032", size = 10),
  ) +
  ggtitle("(3)") + xlab("long") + ylab("lat")

p4 <- glyph_dt %>%
  ggplot(aes(x_major = long, x_minor = as.numeric(date),
             y_major = lat, y_minor = tmax)) +
  geom_sf(data = nsw, fill = "transparent", linetype = "dotted", inherit.aes = FALSE) +
  geom_glyph(width = 1, height = 0.3, alpha = 0.8) +
  theme_bw() +
  coord_sf(xlim = c(141, 143), ylim = c(-35, -33.5)) +
  scale_x_continuous(breaks = seq(140, 143, 1)) +
  scale_y_continuous(breaks = seq(-35, -33, 1)) +
  ggtitle("(4)") + xlab("long") + ylab("lat")

g2 <- (p1 | p2) / (p4 | p3) + plot_layout(guides='collect') &
  theme(legend.position='none')

ggsave(g2, filename = here::here("figures/glyph-steps.png"), height = 4)
```
